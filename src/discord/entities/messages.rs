use serde::{Deserialize, Serialize};
use serde_repr::{Deserialize_repr, Serialize_repr};

use super::{Application, ChannelMention, Emoji, Role, User};

// TODO: Restructure this into module with several files

/// ? https://discord.com/developers/docs/resources/channel#message-object
#[derive(Serialize, Deserialize, Debug)]
pub struct Message {
    /// id of the message
    pub id: String,
    /// id of the channel the message was sent in
    pub channel_id: String,
    /// the author of this message (not guaranteed to be a valid user, see below)
    pub author: User,
    /// contents of the message
    pub content: String,
    /// when this message was sent
    pub timestamp: String,
    /// when this message was edited (or null if never)
    pub edited_timestamp: Option<String>,
    /// whether this was a TTS message
    pub tts: bool,
    /// whether this message mentions everyone
    pub mention_everyone: bool,
    /// users specifically mentioned in the message
    pub mentions: Vec<User>,
    /// roles specifically mentioned in this message
    pub mention_roles: Vec<Role>,
    /// channels specifically mentioned in this message
    pub mention_channels: Option<Vec<ChannelMention>>,
    /// any attached files
    pub attachments: Vec<Attachment>,
    /// any embedded content
    pub embeds: Vec<Embed>,
    /// reactions to this message
    pub reactions: Option<Vec<Reaction>>,
    // TODO: integer or string?
    /// use for validatigng a message was sent
    pub nonce: Option<String>,
    /// whether this message is pinned
    pub pinned: bool,
    /// if the message is generated by a webhoo, this is the webhook's id
    pub webhook_id: Option<String>,
    /// type of the message
    #[serde(rename = "type")]
    pub type_: MessageType,
    /// send with Rich Presence-related chat embeds
    pub activity: Option<MessageActivity>,
    /// send with Rich Presence-related chat embeds
    pub application: Option<Application>,
    /// if the message is an interaction or application-owned webhoo, this is the id of the application
    pub application_id: Option<String>,
    /// data showing the source of a crosspost, channel follow add, pin, or reply message
    pub message_reference: Option<MessageReference>,
    // TODO: introduce https://discord.com/developers/docs/resources/channel#message-object-message-flags
    /// message flags combined as a bitfield
    pub flags: Option<u64>,
    /// the message associated with the message_reference
    pub referenced_message: Box<Option<Message>>,
    /// sent if the message is a response to an interaction
    pub interaction: Option<MessageInteraction>,

    // TODO: Add channel https://discord.com/developers/docs/resources/channel#channel-object
    /// the thread that was started from this message, includes thread member object
    // pub thread: Option<Channel>
    /// sent if the message contains components like buttons, action rows, orother interactive components
    pub components: Option<Vec<MessageComponent>>,
    // TODO: Add stickers https://discord.com/developers/docs/resources/sticker#sticker-item-object
    // sent if the mesasge contains stickers
    // pub sticker_items: Option<Vec<StickerItem>>,
}

/// ? https://discord.com/developers/docs/resources/channel#message-object-message-types
#[derive(Serialize_repr, Deserialize_repr, PartialEq, Debug, Default)]
#[repr(u8)]
pub enum MessageType {
    #[default]
    DEFAULT = 0,
    #[allow(non_camel_case_types)]
    RECIPIENT_ADD = 1,
    #[allow(non_camel_case_types)]
    RECIPIENT_REMOVE = 2,
    CALL = 3,
    #[allow(non_camel_case_types)]
    CHANNEL_NAME_CHANGE = 4,
    #[allow(non_camel_case_types)]
    CHANNEL_ICON_CHANGE = 5,
    #[allow(non_camel_case_types)]
    CHANNEL_PINNED_MESSAGE = 6,
    #[allow(non_camel_case_types)]
    USER_JOIN = 7,
    #[allow(non_camel_case_types)]
    GUILD_BOOST = 8,
    #[allow(non_camel_case_types)]
    GUILD_BOOST_TIER_1 = 9,
    #[allow(non_camel_case_types)]
    GUILD_BOOST_TIER_2 = 10,
    #[allow(non_camel_case_types)]
    GUILD_BOOST_TIER_3 = 11,
    #[allow(non_camel_case_types)]
    CHANNEL_FOLLOW_ADD = 12,
    #[allow(non_camel_case_types)]
    GUILD_DISCOVERY_DISQUALIFIED = 14,
    #[allow(non_camel_case_types)]
    GUILD_DISCOVERY_REQUALIFIED = 15,
    #[allow(non_camel_case_types)]
    GUILD_DISCOVERY_GRACE_PERIOD_INITIAL_WARNING = 16,
    #[allow(non_camel_case_types)]
    GUILD_DISCOVERY_GRACE_PERIOD_FINAL_WARNING = 17,
    #[allow(non_camel_case_types)]
    THREAD_CREATED = 18,
    REPLY = 19,
    #[allow(non_camel_case_types)]
    CHAT_INPUT_COMMAND = 20,
    #[allow(non_camel_case_types)]
    THREAD_STARTER_MESSAGE = 21,
    #[allow(non_camel_case_types)]
    GUILD_INVITE_REMINDER = 22,
    #[allow(non_camel_case_types)]
    CONTEXT_MENU_COMMAND = 23,
    #[allow(non_camel_case_types)]
    AUTO_MODERATION_ACTION = 24,
}

/// ? https://discord.com/developers/docs/resources/channel#attachment-object
#[derive(Serialize, Deserialize, Debug)]
pub struct Attachment {
    /// attachment id
    pub id: String,
    /// name of file attached
    pub filename: String,
    /// description for the file
    pub description: Option<String>,
    /// the attachment's media type
    pub content_type: Option<String>,
    /// size of file in bytes
    pub size: u64,
    /// source url of file
    pub url: String,
    /// a proxied url of file
    pub proxy_url: String,
    /// height of file (if image)
    pub height: Option<u64>,
    /// width of file (if image),
    pub width: Option<u64>,
    /// whether this attachment is ephemeral
    pub ephemeral: Option<bool>,
}

/// ? https://discord.com/developers/docs/resources/channel#embed-object
#[derive(Serialize, Deserialize, Debug)]
pub struct Embed {
    /// title of embed
    pub title: Option<String>,
    /// type of embed (always "rich" for webhook embeds)
    #[serde(rename = "type")]
    pub type_: Option<String>,
    /// description of embed
    pub description: Option<String>,
    /// url of embed
    pub url: Option<String>,
    /// timestamp of embed content
    pub timestamp: Option<String>,
    /// color code of the embed
    pub color: Option<u64>,
    /// footer information
    pub footer: Option<EmbedFooter>,
    /// image information
    pub image: Option<EmbedImage>,
    /// thumbnail information
    pub thumbnail: Option<EmbedThumbnail>,
    /// video information
    pub video: Option<EmbedVideo>,
    /// provider information
    pub provider: Option<EmbedProvider>,
    /// author information
    pub author: Option<EmbedAuthor>,
    /// fields information
    pub fields: Option<Vec<EmbedField>>,
}

/// ? https://discord.com/developers/docs/resources/channel#embed-object-embed-footer-structure
#[derive(Serialize, Deserialize, Debug)]
pub struct EmbedFooter {
    pub text: String,
    pub icon_url: Option<String>,
    pub proxy_icon_url: Option<String>,
}

/// ? https://discord.com/developers/docs/resources/channel#embed-object-embed-image-structure
#[derive(Serialize, Deserialize, Debug)]
pub struct EmbedImage {
    pub url: String,
    pub proxy_url: Option<String>,
    pub height: Option<u64>,
    pub width: Option<u64>,
}

/// ? https://discord.com/developers/docs/resources/channel#embed-object-embed-thumbnail-structure
#[derive(Serialize, Deserialize, Debug)]
pub struct EmbedThumbnail {
    pub url: String,
    pub proxy_url: Option<String>,
    pub height: Option<u64>,
    pub width: Option<u64>,
}

/// ? https://discord.com/developers/docs/resources/channel#embed-object-embed-video-structure
#[derive(Serialize, Deserialize, Debug)]
pub struct EmbedVideo {
    pub url: Option<String>,
    pub proxy_url: Option<String>,
    pub height: Option<u64>,
    pub width: Option<u64>,
}

/// ? https://discord.com/developers/docs/resources/channel#embed-object-embed-provider-structure
#[derive(Serialize, Deserialize, Debug)]
pub struct EmbedProvider {
    pub name: Option<String>,
    pub url: Option<String>,
}

/// ? https://discord.com/developers/docs/resources/channel#embed-object-embed-author-structure
#[derive(Serialize, Deserialize, Debug)]
pub struct EmbedAuthor {
    pub name: String,
    pub url: Option<String>,
    pub icon_url: Option<String>,
    pub proxy_icon_url: Option<String>,
}

/// ? https://discord.com/developers/docs/resources/channel#embed-object-embed-field-structure
#[derive(Serialize, Deserialize, Debug)]
pub struct EmbedField {
    pub name: String,
    pub value: String,
    pub inline: Option<bool>,
}

/// ? https://discord.com/developers/docs/resources/channel#reaction-object
#[derive(Serialize, Deserialize, Debug)]
pub struct Reaction {
    pub count: u64,
    pub me: bool,
    pub emoji: Emoji,
}

/// ? https://discord.com/developers/docs/resources/channel#message-object-message-activity-structure
#[derive(Serialize, Deserialize, Debug)]
pub struct MessageActivity {
    #[serde(rename = "type")]
    pub type_: MessageActivityType,
    pub party_id: Option<String>,
}

/// ?https://discord.com/developers/docs/resources/channel#message-object-message-activity-types
#[derive(Serialize_repr, Deserialize_repr, PartialEq, Debug)]
#[repr(u8)]
pub enum MessageActivityType {
    JOIN = 1,
    SPECTATE = 2,
    LISTEN = 3,
    #[allow(non_camel_case_types)]
    JOIN_REQUEST = 4,
}

/// ? https://discord.com/developers/docs/resources/channel#message-reference-object-message-reference-structure
#[derive(Serialize, Deserialize, Debug)]
pub struct MessageReference {
    pub message_id: Option<String>,
    pub channel_id: Option<String>,
    pub guild_id: Option<String>,
    pub fail_if_not_exists: Option<bool>,
}

/// ? https://discord.com/developers/docs/interactions/receiving-and-responding#message-interaction-object-message-interaction-structure
#[derive(Serialize, Deserialize, Debug)]
pub struct MessageInteraction {
    pub id: String,
    #[serde(rename = "type")]
    pub type_: InteractionType,
    pub name: String,
    pub user: User,
    // TODO: Add members
    // pub member: Member
}

// TODO: move this to other module
/// ? https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-interaction-type
#[derive(Serialize_repr, Deserialize_repr, PartialEq, Debug)]
#[repr(u8)]
pub enum InteractionType {
    PING = 1,
    #[allow(non_camel_case_types)]
    APPLICATION_COMMAND = 2,
    #[allow(non_camel_case_types)]
    MESSAGE_COMPONENT = 3,
    #[allow(non_camel_case_types)]
    APPLICATION_COMMAND_AUTOCOMPLETE = 4,
    #[allow(non_camel_case_types)]
    MOADL_SUBMIT = 5,
}

/// ? https://discord.com/developers/docs/interactions/message-components#component-object
#[derive(Serialize_repr, Deserialize_repr, PartialEq, Debug)]
#[repr(u8)]
pub enum MessageComponent {
    ActionRow = 1,
    Button = 2,
    SelectMenu = 3,
    TextInput = 4,
}
