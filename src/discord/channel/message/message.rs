use serde::{Deserialize, Serialize};

use crate::discord::{
    channel::ChannelMention,
    entities::{Application, Role, User},
};

use super::{
    Attachment, Embed, MessageActivity, MessageComponent, MessageInteraction, MessageReference,
    MessageType, Reaction,
};

/// ? https://discord.com/developers/docs/resources/channel#message-object
#[derive(Serialize, Deserialize, Debug)]
pub struct Message {
    /// id of the message
    pub id: String,
    /// id of the channel the message was sent in
    pub channel_id: String,
    /// the author of this message (not guaranteed to be a valid user, see below)
    pub author: User,
    /// contents of the message
    pub content: String,
    /// when this message was sent
    pub timestamp: String,
    /// when this message was edited (or null if never)
    pub edited_timestamp: Option<String>,
    /// whether this was a TTS message
    pub tts: bool,
    /// whether this message mentions everyone
    pub mention_everyone: bool,
    /// users specifically mentioned in the message
    pub mentions: Vec<User>,
    /// roles specifically mentioned in this message
    pub mention_roles: Vec<Role>,
    /// channels specifically mentioned in this message
    pub mention_channels: Option<Vec<ChannelMention>>,
    /// any attached files
    pub attachments: Vec<Attachment>,
    /// any embedded content
    pub embeds: Vec<Embed>,
    /// reactions to this message
    pub reactions: Option<Vec<Reaction>>,
    // TODO: integer or string?
    /// use for validatigng a message was sent
    pub nonce: Option<String>,
    /// whether this message is pinned
    pub pinned: bool,
    /// if the message is generated by a webhoo, this is the webhook's id
    pub webhook_id: Option<String>,
    /// type of the message
    #[serde(rename = "type")]
    pub type_: MessageType,
    /// send with Rich Presence-related chat embeds
    pub activity: Option<MessageActivity>,
    /// send with Rich Presence-related chat embeds
    pub application: Option<Application>,
    /// if the message is an interaction or application-owned webhoo, this is the id of the application
    pub application_id: Option<String>,
    /// data showing the source of a crosspost, channel follow add, pin, or reply message
    pub message_reference: Option<MessageReference>,
    // TODO: introduce https://discord.com/developers/docs/resources/channel#message-object-message-flags
    /// message flags combined as a bitfield
    pub flags: Option<u64>,
    /// the message associated with the message_reference
    pub referenced_message: Box<Option<Message>>,
    /// sent if the message is a response to an interaction
    pub interaction: Option<MessageInteraction>,

    // TODO: Add channel https://discord.com/developers/docs/resources/channel#channel-object
    /// the thread that was started from this message, includes thread member object
    // pub thread: Option<Channel>
    /// sent if the message contains components like buttons, action rows, orother interactive components
    pub components: Option<Vec<MessageComponent>>,
    // TODO: Add stickers https://discord.com/developers/docs/resources/sticker#sticker-item-object
    // sent if the mesasge contains stickers
    // pub sticker_items: Option<Vec<StickerItem>>,
}
